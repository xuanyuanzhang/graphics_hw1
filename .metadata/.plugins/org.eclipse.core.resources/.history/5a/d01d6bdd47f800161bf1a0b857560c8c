package c2g2.engine.graph;

import org.joml.Matrix4f;
import org.joml.Vector3f;
import c2g2.engine.GameItem;

public class Transformation {

    private final Matrix4f projectionMatrix;
    
    private final Matrix4f viewMatrix;
    
    private final Matrix4f modelMatrix;

    public Transformation() {
        projectionMatrix = new Matrix4f();
        viewMatrix = new Matrix4f();
        modelMatrix = new Matrix4f();
    }

    public final Matrix4f getProjectionMatrix(float fov, float width, float height, float zNear, float zFar) {
        projectionMatrix.identity();
    	//// --- student code ---
        Matrix4f test = new Matrix4f();
    	test.identity();
        
        float ratio = width/height;
        
        float h = (float)Math.tan(fov/2.0);
	    float rm00 = 1.0F / (h * ratio);
	    float rm11 = 1.0F / h;
	    float rm22 = (zFar + zNear) / (zNear - zFar);
	    float rm32 = (zFar + zFar) * zNear / (zNear - zFar);
        
	    float[] input = new float[]{rm00,0,0,0,
	    							0,rm11,0,0,
	    							0,0,rm22,-1,
	    							0,0,rm32,0};
	    
	    projectionMatrix.set(input);
	    
        return projectionMatrix;
    }
    
    public Matrix4f getViewMatrix(Camera camera) {
    	Vector3f cameraPos = camera.getPosition();
    	Vector3f cameraTarget = camera.getTarget();
    	Vector3f up = camera.getUp();
        viewMatrix.identity();
    	//// --- student code ---
        Matrix4f rotate = new Matrix4f();
        Matrix4f translate = new Matrix4f();
        //center
        float posX = cameraPos.x;
        float posY = cameraPos.y;
        float posZ = cameraPos.z;
        //eye
        float Z_x = posX-cameraTarget.x;
        float Z_y = posY-cameraTarget.y;
        float Z_z = posZ-cameraTarget.z;
        Vector3f z = new Vector3f(Z_x,Z_y,Z_z);
        z.normalize();
        
        //up
        float Y_x = up.x;
        float Y_y = up.y;
        float Y_z = up.z;
        Vector3f y = new Vector3f(Y_x,Y_y,Y_z);
        y.normalize();
        
        Vector3f x = new Vector3f();
        y.cross(z, x);
        x.normalize();
        
        z.cross(x, y);
        y.normalize();

        rotate.m00(x.x);
        rotate.m01(x.y);
        rotate.m02(x.z);
        rotate.m03(0);
        rotate.m10(y.x);
        rotate.m11(y.y);
        rotate.m12(y.z);
        rotate.m13(0);
        rotate.m20(z.x);
        rotate.m21(z.y);
        rotate.m22(z.z);
        rotate.m23(0);
        rotate.m30(0);
        rotate.m31(0);
        rotate.m32(0);
        rotate.m33(1);
        
        rotate.transpose();//inverse of an orthonormal matrix is its transpose
        
        translate.identity();
        translate.m30(-posX);
        translate.m31(-posY);
        translate.m32(-posZ);
        
        rotate.mul(translate);
        
        viewMatrix.mul(rotate);
        return viewMatrix;
    }
    
    public Matrix4f getModelMatrix(GameItem gameItem){
        Vector3f rotation = gameItem.getRotation();
        Vector3f position = gameItem.getPosition();
        modelMatrix.identity();
    	//// --- student code ---
        Vector3f xAxis = new Vector3f(1,0,0);
        Vector3f yAxis = new Vector3f(0,1,0);
        Vector3f zAxis = new Vector3f(0,0,1);
        /*Matrix4f test = new Matrix4f();
    	test.identity();
        
        //modelMatrix.translate(position);
        Vector3f xAxis = new Vector3f(1,0,0);
        Vector3f yAxis = new Vector3f(0,1,0);
        Vector3f zAxis = new Vector3f(0,0,1);
        float sX = (float) Math.sin((float)Math.toRadians(rotation.x));
        float cX = (float) Math.cos((float)Math.toRadians(rotation.x));
        float sY = (float) Math.sin((float)Math.toRadians(rotation.y));
        float cY = (float) Math.cos((float)Math.toRadians(rotation.y));
        float sZ = (float) Math.sin((float)Math.toRadians(rotation.z));
        float cZ = (float) Math.cos((float)Math.toRadians(rotation.z));
        
        Matrix4f rotationX = new Matrix4f(1,0,0,0,
        								  0,cX,-sX,0,
        								  0,sX,cX,0,
        								  0,0,0,1);
        Matrix4f rotationY = new Matrix4f(cY,0,sY,0,
        								  0,1,-0,0,
        								  -sY,0,cY,0,
        								  0,0,0,1);
        Matrix4f rotationZ = new Matrix4f(cZ,-sZ,0,0,
				  						  sZ,cZ,0,0,
				  						  0,0,1,0,
				  						  0,0,0,1);
        modelMatrix.mul(rotationX);
        modelMatrix.mul(rotationY);
        modelMatrix.mul(rotationZ);
        
        Matrix4f translation = new Matrix4f(1,0,0,position.x,
        									0,1,0,position.y,
        									0,0,1,position.z,
        									0,0,0,1);
        
        modelMatrix.mul(translation);*/
        
        modelMatrix.rotate((float)Math.toRadians(rotation.x),xAxis);
        modelMatrix.rotate((float)Math.toRadians(rotation.y),yAxis);
        modelMatrix.rotate((float)Math.toRadians(rotation.z),zAxis);
        modelMatrix.translate(position);

        return modelMatrix;
    }
    
    //public Matrix4f getModelMatrix_2(GameItem gameItem){
    public Matrix4f getModelMatrix_2(Vector3f rotation, Vector3f position){
    	//Vector3f rotation = gameItem.getRotation();
        //Vector3f position = gameItem.getPosition();
        modelMatrix.identity();
    	//// --- student code ---
        
        Matrix4f test = new Matrix4f();
    	test.identity();
        
        Vector3f xAxis = new Vector3f(1,0,0);
        Vector3f yAxis = new Vector3f(0,1,0);
        Vector3f zAxis = new Vector3f(0,0,1);
        
        modelMatrix.rotate((float)Math.toRadians(rotation.x),xAxis);
        modelMatrix.rotate((float)Math.toRadians(rotation.y),yAxis);
        modelMatrix.rotate((float)Math.toRadians(rotation.z),zAxis);
        modelMatrix.translate(position);
        return modelMatrix;
    }
    
    public Matrix4f getModelMatrix_3(Vector3f rotation, Vector3f position){
    	modelMatrix.identity();
    	//// --- student code ---
        Matrix4f test = new Matrix4f();
    	test.identity();
        
        //modelMatrix.translate(position);
        //Vector3f xAxis = new Vector3f(1,0,0);
        //Vector3f yAxis = new Vector3f(0,1,0);
        //Vector3f zAxis = new Vector3f(0,0,1);
        float sX = (float) Math.sin((float)Math.toRadians(rotation.x));
        float cX = (float) Math.cos((float)Math.toRadians(rotation.x));
        float sY = (float) Math.sin((float)Math.toRadians(rotation.y));
        float cY = (float) Math.cos((float)Math.toRadians(rotation.y));
        float sZ = (float) Math.sin((float)Math.toRadians(rotation.z));
        float cZ = (float) Math.cos((float)Math.toRadians(rotation.z));
        
        Matrix4f rotationX = new Matrix4f(1,0,0,0,
        								  0,cX,-sX,0,
        								  0,sX,cX,0,
        								  0,0,0,1);
        Matrix4f rotationY = new Matrix4f(cY,0,sY,0,
        								  0,1,-0,0,
        								  -sY,0,cY,0,
        								  0,0,0,1);
        Matrix4f rotationZ = new Matrix4f(cZ,-sZ,0,0,
				  						  sZ,cZ,0,0,
				  						  0,0,1,0,
				  						  0,0,0,1);
        //modelMatrix.mul(rotationX);
        modelMatrix.mul(rotationY);
        modelMatrix.mul(rotationX);
        modelMatrix.mul(rotationZ);
        
        Matrix4f translation = new Matrix4f(1,0,0,position.x,
        									0,1,0,position.y,
        									0,0,1,position.z,
        									0,0,0,1);
        
        modelMatrix.mul(translation);
        
        //modelMatrix.rotate((float)Math.toRadians(rotation.x),xAxis);
        //modelMatrix.rotate((float)Math.toRadians(rotation.y),yAxis);
        //modelMatrix.rotate((float)Math.toRadians(rotation.z),zAxis);
        //modelMatrix.translate(position);

        return modelMatrix;
    }

    public Matrix4f getModelViewMatrix(GameItem gameItem, Matrix4f viewMatrix) {
        Matrix4f viewCurr = new Matrix4f(viewMatrix);
        return viewCurr.mul(getModelMatrix(gameItem));
    }
    
    public static void main(String[] args){
    	Transformation t = new Transformation();
//    	Transformation t2 = new Transformation();
//    	Camera camera = new Camera();
//    	/*Matrix4f m = t.getViewMatrix(camera);
//    	System.out.println(m.m00()+" "+m.m01()+" "+m.m02()+" "+m.m03()+"\n"
//				  +m.m10()+" "+m.m11()+" "+m.m12()+" "+m.m13()+"\n"
//				  +m.m20()+" "+m.m21()+" "+m.m22()+" "+m.m23()+"\n"
//				  +m.m30()+" "+m.m31()+" "+m.m32()+" "+m.m33()+"\n\n");
//    	
//    	Matrix4f m2 = t2.getViewMatrix_2(camera);
//    	System.out.println(m2.m00()+" "+m2.m01()+" "+m2.m02()+" "+m2.m03()+"\n"
//		  		  +m2.m10()+" "+m2.m11()+" "+m2.m12()+" "+m2.m13()+"\n"
//		  		  +m2.m20()+" "+m2.m21()+" "+m2.m22()+" "+m2.m23()+"\n"
//		  		  +m2.m30()+" "+m2.m31()+" "+m2.m32()+" "+m2.m33()+"\n\n");
//    	//Matrix4f m3 = t.getViewMatrix(camera);
//    	m.mul(m2);
//    	System.out.println(m.m00()+" "+m.m01()+" "+m.m02()+" "+m.m03()+"\n"
//		  		  +m.m10()+" "+m.m11()+" "+m.m12()+" "+m.m13()+"\n"
//		  		  +m.m20()+" "+m.m21()+" "+m.m22()+" "+m.m23()+"\n"
//		  		  +m.m30()+" "+m.m31()+" "+m.m32()+" "+m.m33()+"\n\n");*/
//    	float FOV = (float) Math.toRadians(60.0f);
//        float Z_NEAR = 1f;
//        float Z_FAR = 1000.f;
//        
//        /*Matrix4f m = t.getModelMatrix(FOV, 600, 480, Z_NEAR, Z_FAR);
//    	System.out.println(m.m00()+" "+m.m01()+" "+m.m02()+" "+m.m03()+"\n"
//    					  +m.m10()+" "+m.m11()+" "+m.m12()+" "+m.m13()+"\n"
//    					  +m.m20()+" "+m.m21()+" "+m.m22()+" "+m.m23()+"\n"
//    					  +m.m30()+" "+m.m31()+" "+m.m32()+" "+m.m33()+"\n\n");
//    	Matrix4f m2 = t.getModelMatrix_2(FOV, 600, 480, Z_NEAR, Z_FAR);
//    	System.out.println(m2.m00()+" "+m2.m01()+" "+m2.m02()+" "+m2.m03()+"\n"
//				  		  +m2.m10()+" "+m2.m11()+" "+m2.m12()+" "+m2.m13()+"\n"
//				  		  +m2.m20()+" "+m2.m21()+" "+m2.m22()+" "+m2.m23()+"\n"
//				  		  +m2.m30()+" "+m2.m31()+" "+m2.m32()+" "+m2.m33()+"\n\n");*/
//        
        Vector3f rotation = new Vector3f(2,1,3);
        Vector3f position = new Vector3f(1,2,3);
        
    	Matrix4f m = t.getModelMatrix_2(rotation,position);
    	System.out.println(m.m00()+" "+m.m01()+" "+m.m02()+" "+m.m03()+"\n"
    					  +m.m10()+" "+m.m11()+" "+m.m12()+" "+m.m13()+"\n"
    					  +m.m20()+" "+m.m21()+" "+m.m22()+" "+m.m23()+"\n"
    					  +m.m30()+" "+m.m31()+" "+m.m32()+" "+m.m33()+"\n\n");
    	Matrix4f m2 = t.getModelMatrix_3(rotation,position);
    	System.out.println(m2.m00()+" "+m2.m01()+" "+m2.m02()+" "+m2.m03()+"\n"
				  		  +m2.m10()+" "+m2.m11()+" "+m2.m12()+" "+m2.m13()+"\n"
				  		  +m2.m20()+" "+m2.m21()+" "+m2.m22()+" "+m2.m23()+"\n"
				  		  +m2.m30()+" "+m2.m31()+" "+m2.m32()+" "+m2.m33()+"\n\n");
    }
}