package c2g2.engine.graph;

import java.io.BufferedReader;
import java.io.FileReader;

import java.util.ArrayList;
import java.util.List;

import org.joml.Vector2f;
import org.joml.Vector3f;


public class OBJLoader {
    /*public static Mesh loadMesh(String fileName) throws Exception {
    	//// --- student code ---
    	
    	float[] positions;
    	float[] textCoords;
    	float[] norms;
    	int[] indices;
    	
    	//positions = new float[]{-0.5f,-0.5f,-0.5f,-0.5f,-0.5f,0.5f,-0.5f,0.5f,-0.5f,-0.5f,0.5f,0.5f,0.5f,-0.5f,-0.5f,0.5f,-0.5f,0.5f,0.5f,0.5f,-0.5f,0.5f,0.5f,0.5f}; 
    	//textCoords = new float[]{0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f};
    	//norms = new float[]{0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f};
    	//indices = new int[]{0,6,4,0,2,6,0,3,2,0,1,3,2,7,6,2,3,7,4,6,7,4,7,5,0,4,5,0,5,1,1,5,7,1,7,3};
        //your task is to read data from an .obj file and fill in those arrays.
        //the data in those arrays should use following format.
        //positions[0]=v[0].position.x positions[1]=v[0].position.y positions[2]=v[0].position.z positions[3]=v[1].position.x ...
        //textCoords[0]=v[0].texture_coordinates.x textCoords[1]=v[0].texture_coordinates.y textCoords[2]=v[1].texture_coordinates.x ...
        //norms[0]=v[0].normals.x norms[1]=v[0].normals.y norms[2]=v[0].normals.z norms[3]=v[1].normals.x...
        //indices[0]=face[0].ind[0] indices[1]=face[0].ind[1] indices[2]=face[0].ind[2] indices[3]=face[1].ind[0]...(assuming all the faces are triangle face)
    	
        
    	ArrayList<String> input = new ArrayList<String>();
      	
        int position_count = 0;
  		int textCoords_count = 0;
  		int norms_count = 0;
  		int indices_count = 0;
  		
        BufferedReader br = new BufferedReader(new FileReader(fileName));
      	try{
      		String line = br.readLine();
      		if(fileName.equals("src/resources/models/bunny.obj")){
      			line = br.readLine();
      			line = br.readLine();
      			line = br.readLine();
      		}
      		
      		while(line != null){
      			//System.out.println(line);
      			//System.out.println(line.charAt(0));
      			if((line.charAt(0)=='v' || line.charAt(0)=='f')&&(line.charAt(4) < 'a' || line.charAt(4) > 'z')){
      				//System.out.println(line);
      				input.add(line);
  	    			if(line.charAt(0)=='v' && line.charAt(1)==' '){
  	    				position_count+=3;
  	    			}
  	    			else if(line.charAt(0)=='v' && line.charAt(1)=='t')
  	    				textCoords_count+=2;
  	    			else if(line.charAt(0)=='v' && line.charAt(1)=='n')
  	    				norms_count+=3;
  	    			else if(line.charAt(0)=='f')
  	    				indices_count+=3;
      			}
      			line = br.readLine();
      		}
      	}finally{
      		br.close();
      	}
      	positions = new float[position_count];
        textCoords = new float[textCoords_count];
        norms = new float[norms_count];
        indices = new int[indices_count];
      	
        position_count = 0;
  		textCoords_count = 0;
  		norms_count = 0;
  		indices_count = 0;
          
        for(int i=0;i<input.size();i++){
        	String[] output;
        	if(fileName.equals("src/resources/models/cube2.obj")){
        		output = input.get(i).split("  ");
        	}
        	else{
        		output = input.get(i).split(" ");
        	}
          	String[] arr;
          	int l = output.length;
  			if(output[0].equals("v")){
  				//System.out.println("yes?");
  				for(int j=1;j<l;j++){
  					positions[position_count] = Float.valueOf(output[j]);
  					//System.out.println("first number is: "+ positions[position_count]);
  					position_count ++;
  				}
  			}
  			else if(output[0].equals("vt")){
  				for(int j=1;j<l;j++){
  					textCoords[textCoords_count] = Float.valueOf(output[j]);
  					//System.out.println("first number is: "+ textCoords[textCoords_count]);
  					textCoords_count ++;
  				}
  			}
  			else if(output[0].equals("vn")){
  				for(int j=1;j<l;j++){
  					norms[norms_count] = Float.valueOf(output[j]);
  					//System.out.println("first number is: "+ norms[norms_count]);
  					norms_count ++;
  				}
  			}
  			
  			else if(output[0].equals("f")){
  				//int size = (fileName.equals("src/resources/models/bunny.obj") ? )
  				for(int j=1;j<l;j++){
  					if(fileName.equals("src/resources/models/bunny.obj")){
  						arr = output[j].split("//");
  					}
  					else if(fileName.equals("src/resources/models/cube2.obj")){
  						arr = output[j].split("  ");
  					}
  					else{
  						arr = output[j].split("/");
  					}
  					//System.out.println(arr.length);
  					System.out.println(arr[0]);
					//System.out.println(arr[k]);
					//System.out.println(indices_count);
					indices[indices_count] = Integer.valueOf(arr[0])-1;
					//System.out.println("first number is: "+ indices[indices_count]);
					indices_count ++;
  				}
  			}
          }
        
        return new Mesh(positions, textCoords, norms, indices);
    }*/
    
    private static Vector3f convertVertex(String line){
    	line = line.replaceAll("\\s+", " ");
    	System.out.println(line);
    	String[] s = line.split(" ");
    	float x = Float.valueOf(s[1]);
    	float y = Float.valueOf(s[2]);
    	float z = Float.valueOf(s[3]);
    	Vector3f output = new Vector3f(x,y,z);
    	return output;
    }
    
    private static Vector2f convertTexture(String line){
    	line = line.replaceAll("\\s+", " ");
    	String[] s = line.split(" ");
    	float x = Float.valueOf(s[1]);
    	float y = Float.valueOf(s[2]);
    	Vector2f output = new Vector2f(x,y);
    	return output;
    }
    
    private static Vector3f convertNormal(String line){
    	line = line.replaceAll("\\s+", " ");
    	String[] s = line.split(" ");
    	float x = Float.valueOf(s[1]);
    	float y = Float.valueOf(s[2]);
    	float z = Float.valueOf(s[3]);
    	Vector3f output = new Vector3f(x,y,z);
    	return output;
    }
    
    private static int[][] convertFace(String line){
    	line = line.replaceAll("\\s+", " ");
    	String[] s = line.split(" ");
    	int count = 0;//number of elements
    	if(s[1].length()==1)
    		count = 1;
    	else{
			for(int j=0;j<s[1].length()-1;j++){
				if(s[1].charAt(j)=='/' && s[1].charAt(j+1)=='/'){
					count = 2;
					break;
				}
				else if(s[1].charAt(j)=='/')
					count = 3;
			}
			if(count==0)
				count = 1;
    	}
    	System.out.println("count is: "+count);
    	int[][] output = new int[3][count];
		for(int i=1;i<4;i++){
			if(count==1)
				output[i-1] = new int[]{Integer.valueOf(s[i])};
			else if(count==2){
				String[] temp = s[i].split("//");
				output[i-1] = new int[]{Integer.valueOf(temp[0]),Integer.valueOf(temp[1])};
			}
			else{
				String[] temp = s[i].split("/");
				//System.out.println(temp[0]);
				//System.out.println(temp[1]);
				//System.out.println(temp[2]);
				output[i-1] = new int[]{Integer.valueOf(temp[0]),Integer.valueOf(temp[1]),Integer.valueOf(temp[2])};
			}
		}
		
    	return output;
    }
    
    public static Mesh loadMesh(String fileName) throws Exception {
    	//// --- student code ---
    	
    	List<Float> ListP = new ArrayList<Float>();
    	List<Float> ListT = new ArrayList<Float>();
    	List<Float> ListN = new ArrayList<Float>();
    	List<Integer> ListI = new ArrayList<Integer>();
    	
    	int position_count = 0;
  		int textCoords_count = 0;
  		int norms_count = 0;
  		int indices_count = 0;
  		
        BufferedReader br = new BufferedReader(new FileReader(fileName));
        
        String line;
        while((line=br.readLine())!=null){
        	System.out.println(line);
        	if(line.split(" ")[0].equals("v")){
        		System.out.println("yes it is vertex");
        		Vector3f output = convertVertex(line);
        		ListP.add(output.x);
        		ListP.add(output.y);
        		ListP.add(output.z);
        	}
        	else if(line.split(" ")[0].equals("vt")){
        		Vector2f output = convertTexture(line);
        		ListT.add(output.x);
        		ListT.add(output.y);
        	}
        	else if(line.split(" ")[0].equals("vn")){
        		Vector3f output = convertNormal(line);
        		ListN.add(output.x);
        		ListN.add(output.y);
        		ListN.add(output.z);
        	}
        	else if(line.split(" ")[0].equals("f")){
        		int[][] output = convertFace(line);
        		for(int i=0;i<3;i++){
        			for(int j=0;j<output[0].length;j++){
        				ListI.add(output[i][j]);
        			}
        		}
        	}
        }
        System.out.println("Hello");
        float[] positions = new float[ListP.size()];
        for(int i=0;i<ListP.size();i++){
        	positions[i] = ListP.get(i);
        	System.out.print(positions[i]+" ");
        }
        System.out.print("\n");
        float[] textCoords = new float[ListT.size()];
        for(int i=0;i<ListT.size();i++){
        	textCoords[i] = ListT.get(i);
        	System.out.print(textCoords[i]+" ");
        }
        System.out.print("\n");
        float[] norms = new float[ListN.size()];
        for(int i=0;i<ListN.size();i++){
        	norms[i] = ListN.get(i);
    		System.out.print(norms[i]+" ");
        }
    	System.out.print("\n");
        int[] indices = new int[ListI.size()];
        for(int i=0;i<ListI.size();i++){
        	indices[i] = ListI.get(i);
    		System.out.print(indices[i]+" ");
        }
    	System.out.println("\n");
    	return new Mesh(positions, textCoords, norms, indices);
    }
    
    /*public static void main(String[] args) throws Exception{
    	
    	//Mesh m = OBJLoader.loadMesh("src/resources/models/cube.obj");
    	System.out.println("\n");
    	Mesh m2 = OBJLoader.loadMesh_2("src/resources/models/bunny"
    			+ ".obj");
    }*/

}
